name: Build Blender Extension
description: Action to automatically build the Blender Extension and store the resulting .zip artifact.
author: DShot92, Daniele Stochino

branding:
  icon: box
  color: blue

runs:
  using: composite

  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install required Python packages
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install requests toml-cli toml beautifulsoup4

    - name: Get latest daily Blender build URL
      shell: bash
      id: get_blender_url
      run: |
        BLENDER_URL=$(python3 - <<EOF
        import re
        import requests
        from bs4 import BeautifulSoup

        def get_latest_daily_build_url():
            try:
                url = "https://builder.blender.org/download/daily/"
                response = requests.get(url)
                soup = BeautifulSoup(response.content, 'html.parser')
                links = soup.find_all('a', href=re.compile(r"https://cdn\.builder\.blender\.org/download/daily/blender-\d+\.\d+\.\d+-\w+\+\w+\.\w+-linux\.x86_64-release\.tar\.xz"))
                
                # Filter out URLs containing '.sha256'
                download_urls = [link['href'] for link in links if '.sha256' not in link['href']]

                if download_urls:
                    return download_urls[0]
                else:
                    return None

            except Exception as e:
                print(f"Error fetching Blender URL: {e}")
                return None

        blender_url = get_latest_daily_build_url()
        if blender_url:
            print(f"BLENDER_URL={blender_url}")
            print(blender_url)
        else:
            print("Failed to fetch Blender URL.")
            exit(1)
        EOF)

    - name: Set Blender URL in environment
      shell: bash
      run: echo "BLENDER_URL=${{ steps.get_blender_url.outputs.stdout }}" >> $GITHUB_ENV


    - name: Download and extract Blender
      shell: bash
      run: |
        wget -O /home/runner/blender.tar.xz "${{ env.BLENDER_URL }}"
        mkdir -p /home/runner/.local/bin /home/runner/blender
        tar -xf /home/runner/blender.tar.xz -C /home/runner/blender --strip-components=1
        ln -s /home/runner/blender/blender /home/runner/.local/bin/blender

    - name: Remove blender_url.txt
      shell: bash
      run: rm blender_url.txt

    - name: Extract version from blender_manifest.toml
      shell: bash
      id: extract_version
      run: |
        version=$(python -c "import toml; print(toml.load('./blender_manifest.toml')['version'])")
        echo "Version: $version"
        echo "version=$version" >> $GITHUB_ENV  # Store version in environment variable
        echo "ZIP_FILE_PATH=/home/runner/${{ github.event.repository.name }}-${version}.zip" >> $GITHUB_ENV  # Store zip file path in environment variable

    - name: Build extension and capture zip filename
      shell: bash
      run: |
        blender --command extension build --output-filepath="${{ env.ZIP_FILE_PATH }}"

    - name: Unzip the file
      shell: bash
      run: |
        unzip "${{ env.ZIP_FILE_PATH }}" -d "/home/runner/${{ github.event.repository.name }}-${{ env.version }}"

    - name: Archive artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.event.repository.name }}-${{ env.version }}
        path: /home/runner/${{ github.event.repository.name }}-${{ env.version }}

